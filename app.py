# -*- coding: utf-8 -*-
"""app.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1FefFOefsXME81s_0q6ph7xsmHNT2SAOM
"""

from google.colab import files
uploaded = files.upload()

!pip install gradio pandas numpy scikit-learn joblib

import gradio as gr
import pandas as pd
import joblib
import numpy as np

# Load your trained pipeline
model = joblib.load("churn_prediction_pipeline.pkl")

all_features = [
    "gender", "SeniorCitizen", "Partner", "Dependents",
    "tenure", "PhoneService", "MultipleLines", "InternetService",
    "OnlineSecurity", "OnlineBackup", "DeviceProtection",
    "TechSupport", "StreamingTV", "StreamingMovies", "Contract",
    "PaperlessBilling", "PaymentMethod", "MonthlyCharges", "TotalCharges"
]

def predict_churn(*args):
    input_data = pd.DataFrame([args], columns=all_features)

    # Predict churn (0=no, 1=yes) and probability
    prediction = model.predict(input_data)[0]
    probability = model.predict_proba(input_data)[1]

    return f"Churn Probability: {probability:.2%} | Prediction: {'Churn' if prediction == 1 else 'No Churn'}"

inputs = [
    gr.Radio(["Female", "Male"], label="Gender"),
    gr.Radio([0, 1], label="Senior Citizen"),
    gr.Radio(["Yes", "No"], label="Partner"),
    gr.Radio(["Yes", "No"], label="Dependents"),
    gr.Slider(0, 72, label="Tenure (months)"),
    gr.Radio(["Yes", "No"], label="Phone Service"),
    gr.Radio(["Yes", "No", "No phone service"], label="Multiple Lines"),
    gr.Radio(["DSL", "Fiber optic", "No"], label="Internet Service"),
    gr.Radio(["Yes", "No"], label="Online Security"),
    gr.Radio(["Yes", "No"], label="Online Backup"),
    gr.Radio(["Yes", "No"], label="Device Protection"),
    gr.Radio(["Yes", "No"], label="Tech Support"),
    gr.Radio(["Yes", "No"], label="Streaming TV"),
    gr.Radio(["Yes", "No"], label="Streaming Movies"),
    gr.Radio(["Month-to-month", "One year", "Two year"], label="Contract"),
    gr.Radio(["Yes", "No"], label="Paperless Billing"),
    gr.Dropdown(["Electronic check", "Mailed check", "Bank transfer (automatic)", "Credit card (automatic)"], label="Payment Method"),
    gr.Number(label="Monthly Charges"),
    gr.Number(label="Total Charges")
]

iface = gr.Interface(
    fn=predict_churn,
    inputs=inputs,
    outputs="text",
    title="Customer Churn Predictor",
    description="Enter customer details to predict churn probability"
)

iface.launch(share=True)

